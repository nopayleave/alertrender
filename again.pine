//@version=5
indicator("again", overlay=false)

// 用 type 定義
type Bar
    float o
    float h
    float l
    float c

// 自定 method 放 struct 之後
method src(Bar b, simple string src) =>
    switch src
        'open'  => b.o
        'high'  => b.h
        'low'   => b.l
        'close' => b.c
        => na

// 你 custom stmc method
method stmc(Bar b, simple string src, simple int flen, simple int slen, simple string sig, simple int clen) =>
    float x = (ta.ema(b.src(src), flen)  - ta.ema(b.src(src), slen)) / (ta.ema(b.h - b.l , slen)) * 100
    float prev_x = nz(x[1])
    Bar z = Bar.new(prev_x, math.max(x, prev_x), math.min(x, prev_x), x)
    float s = ta.ema(z.src(sig), clen)
    s

// 組 Bar struct
bar_from_ohlc() =>
    Bar.new(open, high, low, close)

// MACD input
src  = input.string('close' , "Source"             )
fast = input.int   (10      , "Fast Length"        )
slow = input.int   (75      , "Slow Length"        )
sigs = input.string('close' , "Signal Source"      )
sigl = input.int   (20       , "Signal Length"      )

// 定義同一 set MACD 設定
getSignal(_tf) =>
    request.security(syminfo.tickerid, _tf, bar_from_ohlc().stmc(src, fast, slow, sigs, sigl))

symbol = syminfo.ticker
timeframeStr = timeframe.period
epoch = time
humantime = str.format("{0,date,yyyy-MM-dd HH:mm}", timestamp("GMT+8", year, month, dayofmonth, hour, minute))
price = close
vol = volume

// Calculate price change from previous trading day
priceChange = na(close[1]) ? na : ((close - close[1]) / close[1]) * 100

s30_signal = getSignal("30S")
s1m_signal = getSignal("1")
s5m_signal = getSignal("5")

jsonMsg = '{' +
  '"symbol": "' + symbol + '",' +
  '"timeframe": "' + timeframeStr + '",' +
  '"time": "' + str.tostring(epoch) + '",' +
  '"humantime": "' + humantime + '",' +
  '"price": ' + str.tostring(price) + ',' +
  '"priceChange": ' + str.tostring(priceChange) + ',' +
  '"volume": ' + str.tostring(vol) + ',' +
  '"s30_signal": ' + str.tostring(s30_signal) + ',' +
  '"s1m_signal": ' + str.tostring(s1m_signal) + ',' +
  '"s5m_signal": ' + str.tostring(s5m_signal) + '}'

if barstate.isconfirmed
    alert(jsonMsg, alert.freq_once_per_bar_close)
