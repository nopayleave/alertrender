//@version=5
indicator("Again", overlay=false)

// ==== bar, osc, stoch type definitions ====
type bar
    float o
    float h
    float l
    float c

type osc
    bar   b
    float s
    float h

type stoch
    float k
    float d

// ==== src function ====
src(b, srcType) =>
    switch srcType
        'open'  => b.o
        'high'  => b.h
        'low'   => b.l
        'close' => b.c
        'hl2'   => (b.h + b.l) / 2
        'hlc3'  => (b.h + b.l + b.c) / 3
        'ohlc4' => (b.o + b.h + b.l + b.c) / 4
        'hlcc4' => (b.h + b.l + b.c + b.c) / 4
        => na

// ==== stmc MACD function ====
stmc(b, srcType, flen, slen, sig, clen) =>
    x = (ta.ema(src(b, srcType), flen) - ta.ema(src(b, srcType), slen)) / (ta.ema(b.h - b.l , slen)) * 100
    s = ta.ema(src(b, sig), clen)
    osc.new(bar.new(b.o, b.h, b.l, x), s, x - s)

// ==== calcStoch function ====
calcStoch(len, smooth, dlen, timeframe) =>
    [stochHigh, stochLow, stochClose] = request.security(syminfo.tickerid, timeframe, [high, low, close])
    highest_high = ta.highest(stochHigh, len)
    lowest_low = ta.lowest(stochLow, len)
    rawK = 100 * (stochClose - lowest_low) / (highest_high - lowest_low)
    smoothK = ta.sma(rawK, smooth)
    d = ta.sma(smoothK, dlen)
    [smoothK, d]

// ==== MACD Settings ====
groupMacd = "MACD Settings"
src_input  = input.string('close', "Source", ['open', 'high', 'low', 'close', 'hl2', 'hlc3', 'ohlc4', 'hlcc4'], group=groupMacd)
fast = input.int(10, "Fast Length", group=groupMacd)
slow = input.int(75, "Slow Length", group=groupMacd)
sigs = input.string('close', "Signal Source", ['open', 'high', 'low', 'close', 'hl2', 'hlc3', 'ohlc4', 'hlcc4'], group=groupMacd)
sigl = input.int(20, "Signal Length", group=groupMacd)

// ==== Stochastic Settings ====
groupStoch = "Stochastic Settings"
stochLen    = input.int(10, "Stoch K Length", group=groupStoch)
stochSmooth = input.int(10, "K Smoothing", group=groupStoch)
stochDLen   = input.int(10, "D Length", group=groupStoch)
stochTf     = input.timeframe("", "Timeframe (empty=current)", group=groupStoch)
showStoch   = input.bool(true, "Show Stoch", group=groupStoch)

// ==== Calculations ====
b = bar.new(open, high, low, close)
o = stmc(b, src_input, fast, slow, sigs, sigl)
[stochK, stochD] = calcStoch(stochLen, stochSmooth, stochDLen, stochTf)
stochObj = stoch.new(stochK, stochD)

// ==== Helper: Human readable time ====
f_humantime(ts) =>
    y = str.tostring(year(ts))
    m = str.format("{0,number,00}", month(ts))
    d = str.format("{0,number,00}", dayofmonth(ts))
    h = str.format("{0,number,00}", hour(ts))
    min = str.format("{0,number,00}", minute(ts))
    y + '-' + m + '-' + d + ' ' + h + ':' + min

// ==== Multi-Timeframe Signals ====
s30sSignal = request.security(syminfo.tickerid, "30S", stmc(b, src_input, fast, slow, sigs, sigl).s)
s1mSignal = request.security(syminfo.tickerid, "1", stmc(b, src_input, fast, slow, sigs, sigl).s)
s5mSignal = request.security(syminfo.tickerid, "5", stmc(b, src_input, fast, slow, sigs, sigl).s)
[sk2m, _] = calcStoch(stochLen, stochSmooth, stochDLen, "2")
[sk2m_2ago_val, _] = request.security(syminfo.tickerid, "2", calcStoch(stochLen, stochSmooth, stochDLen, "2"))
sk2m_2ago = sk2m_2ago_val[2]
sk2mDiff = sk2m - sk2m_2ago

// ==== Price change vs previous day close ====
yestclose = request.security(syminfo.tickerid, "D", close[1])
priceChange = na(yestclose) ? na : (close - yestclose) / yestclose * 100

// ==== 2m MACD signal at specific bar ====
get_2m_signal(bars_ago) =>
    request.security(syminfo.tickerid, "2", stmc(b, src_input, fast, slow, sigs, sigl).s[bars_ago])

_2m930signal = get_2m_signal(0)
_2m932signal = get_2m_signal(1)
_2m1000signal = get_2m_signal(15) // According to your chart, this index should be checked for 10:00am

// ==== Assemble Webhook JSON ====
webhookMsg = '{' + '"symbol":"' + syminfo.ticker + '",' + '"timeframe":"' + timeframe.period + '",' + '"time":"' + str.tostring(time) + '",' + '"humantime":"' + f_humantime(time) + '",' + '"price":' + str.tostring(close) + ',' + '"priceChange":' + str.tostring(priceChange) + ',' + '"volume":' + str.tostring(volume) + ',' + '"stochK":' + str.tostring(stochK) + ',' + '"2m930signal":' + str.tostring(_2m930signal) + ',' + '"2m932signal":' + str.tostring(_2m932signal) + ',' + '"2m1000signal":' + str.tostring(_2m1000signal) + ',' + '"s30sSignal":' + str.tostring(s30sSignal) + ',' + '"s1mSignal":' + str.tostring(s1mSignal) + ',' + '"s5mSignal":' + str.tostring(s5mSignal) + ',' + '"sk2mDiff":' + str.tostring(sk2mDiff) + '}'

// ==== Alert ====
if ta.change(time) != 0
    alert(webhookMsg, alert.freq_once_per_bar_close)
