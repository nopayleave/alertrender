//@version=5
indicator(title="Volume Weighted Average Price", shorttitle="VWAP", overlay=true, timeframe="", timeframe_gaps=true)

hideonDWM = input(false, title="Hide VWAP on 1D or Above", group="VWAP Settings", display = display.data_window)
var anchor = input.string(defval = "Session", title="Anchor Period",
 options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src = input(title = "Source", defval = hlc3, group="VWAP Settings", display = display.data_window)
offset = input.int(0, title="Offset", group="VWAP Settings", minval=0, display = display.data_window)

// Additional Indicator Settings
EMA_GROUP = "EMA Settings"
ema1Length = input.int(9, title="EMA 1 Length", group=EMA_GROUP)
ema2Length = input.int(21, title="EMA 2 Length", group=EMA_GROUP)

MACD_GROUP = "MACD Settings"
macdFast = input.int(12, title="MACD Fast Length", group=MACD_GROUP)
macdSlow = input.int(26, title="MACD Slow Length", group=MACD_GROUP)
macdSignal = input.int(9, title="MACD Signal Length", group=MACD_GROUP)

RSI_GROUP = "RSI Settings"
rsiLength = input.int(14, title="RSI Length", group=RSI_GROUP)

ALERT_GROUP = "Alert Settings"
enableAlerts = input.bool(true, title="Enable Webhook Alerts", group=ALERT_GROUP)

BANDS_GROUP = "Bands Settings"
CALC_MODE_TOOLTIP = "Determines the units used to calculate the distance of the bands. When 'Percentage' is selected, a multiplier of 1 means 1%."
calcModeInput = input.string("Standard Deviation", "Bands Calculation Mode", options = ["Standard Deviation", "Percentage"], group = BANDS_GROUP, tooltip = CALC_MODE_TOOLTIP, display = display.data_window)
showBand_1 = input(true, title = "", group = BANDS_GROUP, inline = "band_1", display = display.data_window)
bandMult_1 = input.float(1.0, title = "Bands Multiplier #1", group = BANDS_GROUP, inline = "band_1", step = 0.5, minval=0, display = display.data_window)
showBand_2 = input(false, title = "", group = BANDS_GROUP, inline = "band_2", display = display.data_window)
bandMult_2 = input.float(2.0, title = "Bands Multiplier #2", group = BANDS_GROUP, inline = "band_2", step = 0.5, minval=0, display = display.data_window)
showBand_3 = input(false, title = "", group = BANDS_GROUP, inline = "band_3", display = display.data_window)
bandMult_3 = input.float(3.0, title = "Bands Multiplier #3", group = BANDS_GROUP, inline = "band_3", step = 0.5, minval=0, display = display.data_window)

if barstate.islast and ta.cum(volume) == 0
    runtime.error("No volume is provided by the data vendor.")

new_earnings = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_dividends = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_split = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)

isNewPeriod = switch anchor
	"Earnings"  => not na(new_earnings)
	"Dividends" => not na(new_dividends)
	"Splits"    => not na(new_split)
	"Session"   => timeframe.change("D")
	"Week"      => timeframe.change("W")
	"Month"     => timeframe.change("M")
	"Quarter"   => timeframe.change("3M")
	"Year"      => timeframe.change("12M")
	"Decade"    => timeframe.change("12M") and year % 10 == 0
	"Century"   => timeframe.change("12M") and year % 100 == 0
	=> false

isEsdAnchor = anchor == "Earnings" or anchor == "Dividends" or anchor == "Splits"
if na(src[1]) and not isEsdAnchor
	isNewPeriod := true

float vwapValue = na
float upperBandValue1 = na
float lowerBandValue1 = na
float upperBandValue2 = na
float lowerBandValue2 = na
float upperBandValue3 = na
float lowerBandValue3 = na

if not (hideonDWM and timeframe.isdwm)
    [_vwap, _stdevUpper, _] = ta.vwap(src, isNewPeriod, 1)
	vwapValue := _vwap
    stdevAbs = _stdevUpper - _vwap
	bandBasis = calcModeInput == "Standard Deviation" ? stdevAbs : _vwap * 0.01
	upperBandValue1 := _vwap + bandBasis * bandMult_1
	lowerBandValue1 := _vwap - bandBasis * bandMult_1
	upperBandValue2 := _vwap + bandBasis * bandMult_2
	lowerBandValue2 := _vwap - bandBasis * bandMult_2
	upperBandValue3 := _vwap + bandBasis * bandMult_3
	lowerBandValue3 := _vwap - bandBasis * bandMult_3

plot(vwapValue, title="VWAP", color=#2962FF, offset=offset)

upperBand_1 = plot(upperBandValue1, title="Upper Band #1", color=color.green, offset=offset, display = showBand_1 ? display.all : display.none)
lowerBand_1 = plot(lowerBandValue1, title="Lower Band #1", color=color.green, offset=offset, display = showBand_1 ? display.all : display.none)
fill(upperBand_1, lowerBand_1, title="Bands Fill #1", color= color.new(color.green, 95)    , display = showBand_1 ? display.all : display.none)

upperBand_2 = plot(upperBandValue2, title="Upper Band #2", color=color.olive, offset=offset, display = showBand_2 ? display.all : display.none)
lowerBand_2 = plot(lowerBandValue2, title="Lower Band #2", color=color.olive, offset=offset, display = showBand_2 ? display.all : display.none)
fill(upperBand_2, lowerBand_2, title="Bands Fill #2", color= color.new(color.olive, 95)    , display = showBand_2 ? display.all : display.none)

upperBand_3 = plot(upperBandValue3, title="Upper Band #3", color=color.teal, offset=offset, display = showBand_3 ? display.all : display.none)
lowerBand_3 = plot(lowerBandValue3, title="Lower Band #3", color=color.teal, offset=offset, display = showBand_3 ? display.all : display.none)
fill(upperBand_3, lowerBand_3, title="Bands Fill #3", color= color.new(color.teal, 95)    , display = showBand_3 ? display.all : display.none)

// ============ ADDITIONAL INDICATORS ============

// EMA Calculations
ema1 = ta.ema(close, ema1Length)
ema2 = ta.ema(close, ema2Length)

// Day High and Low
dayHigh = request.security(syminfo.tickerid, "D", high)
dayLow = request.security(syminfo.tickerid, "D", low)

// MACD Calculation
[macdLine, signalLine, macdHist] = ta.macd(close, macdFast, macdSlow, macdSignal)

// RSI Calculation
rsi = ta.rsi(close, rsiLength)

// Trend Determination (based on price vs VWAP and EMA alignment)
trend = close > vwapValue and ema1 > ema2 ? "Bullish" : close < vwapValue and ema1 < ema2 ? "Bearish" : "Neutral"

// ============ WEBHOOK ALERT ============

if enableAlerts and barstate.isconfirmed
    // Build JSON payload
    jsonMsg = '{' +
      '"symbol": "' + syminfo.ticker + '",' +
      '"timeframe": "' + timeframe.period + '",' +
      '"time": "' + str.tostring(time) + '",' +
      '"price": ' + str.tostring(close) + ',' +
      '"trend": "' + trend + '",' +
      '"vwap": ' + str.tostring(vwapValue, "#.##") + ',' +
      '"vwapUpper1": ' + str.tostring(upperBandValue1, "#.##") + ',' +
      '"vwapLower1": ' + str.tostring(lowerBandValue1, "#.##") + ',' +
      '"vwapUpper2": ' + str.tostring(upperBandValue2, "#.##") + ',' +
      '"vwapLower2": ' + str.tostring(lowerBandValue2, "#.##") + ',' +
      '"vwapUpper3": ' + str.tostring(upperBandValue3, "#.##") + ',' +
      '"vwapLower3": ' + str.tostring(lowerBandValue3, "#.##") + ',' +
      '"ema1": ' + str.tostring(ema1, "#.##") + ',' +
      '"ema2": ' + str.tostring(ema2, "#.##") + ',' +
      '"dayHigh": ' + str.tostring(dayHigh, "#.##") + ',' +
      '"dayLow": ' + str.tostring(dayLow, "#.##") + ',' +
      '"macd": ' + str.tostring(macdLine, "#.####") + ',' +
      '"macdSignal": ' + str.tostring(signalLine, "#.####") + ',' +
      '"rsi": ' + str.tostring(rsi, "#.##") + ',' +
      '"volume": ' + str.tostring(volume) + '}'
    
    alert(jsonMsg, alert.freq_once_per_bar_close)