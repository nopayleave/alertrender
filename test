//@version=5
indicator("test", overlay=false)

// ==== Data Types ====
type bar
    float o = na
    float h = na
    float l = na
    float c = na

type osc
    bar   b = na
    float s = na
    float h = na

type stoch
    float k = na
    float d = na

// ==== Helper Methods ====
method src(bar b, simple string src) =>
    float x = switch src
        'open'  => b.o
        'high'  => b.h
        'low'   => b.l
        'close' => b.c
        'oc2'   => math.avg(b.o, b.c)
        'hl2'   => math.avg(b.h, b.l)
        'hlc3'  => math.avg(b.h, b.l, b.c)
        'ohlc4' => math.avg(b.o, b.h, b.l, b.c)
        'hlcc4' => math.avg(b.h, b.l, b.c, b.c)
    x

method ha(bar b, simple bool p = true) =>
    var bar x = bar.new()
    x.c      := b.src('ohlc4')
    x        := bar.new(
         na(x.o[1]) ? b.src('oc2') : nz(x.src('oc2')[1]),
         math.max(b.h, math.max(x.o, x.c)),
         math.min(b.l, math.min(x.o, x.c)),
         x.c)
    p ? x : b

// ==== stmc MACD method ====
method stmc(bar b, simple string src, simple int flen, simple int slen, simple string sig, simple int clen) =>
    float x = (ta.ema(b.src(src), flen) - ta.ema(b.src(src), slen)) / (ta.ema(b.h - b.l , slen)) * 100
    bar   z = bar.new(x[1], math.max(x, x[1]), math.min(x, x[1]), x).ha()
    float s = ta.ema(z.src(sig), clen)
    osc.new(z, s, z.c - s)

// ==== Dual Timeframe Stochastic (單 timeframe 版) ====
method calcStoch(simple int len, simple int smooth, simple int dlen, simple string timeframe) =>
    [stochHigh, stochLow, stochClose] = request.security(syminfo.tickerid, timeframe, [high, low, close])
    float highest_high = ta.highest(stochHigh, len)
    float lowest_low = ta.lowest(stochLow, len)
    float rawK = 100 * (stochClose - lowest_low) / (highest_high - lowest_low)
    float smoothK = ta.sma(rawK, smooth)
    float d = ta.sma(smoothK, dlen)
    [smoothK, d]

// ==== MACD Settings ====
groupMacd = "MACD Settings"
src  = input.string('close', "Source", ['open', 'high', 'low', 'close', 'hl2', 'hlc3', 'ohlc4', 'hlcc4'], group=groupMacd)
fast = input.int(10, "Fast Length", group=groupMacd)
slow = input.int(75, "Slow Length", group=groupMacd)
sigs = input.string('close', "Signal Source", ['open', 'high', 'low', 'close', 'hl2', 'hlc3', 'ohlc4', 'hlcc4'], group=groupMacd)
sigl = input.int(20, "Signal Length", group=groupMacd)

// ==== Stochastic Settings (預設 10, 10, 10) ====
groupStoch = "Stochastic Settings"
stochLen    = input.int(10, "Stoch K Length", group=groupStoch)
stochSmooth = input.int(10, "K Smoothing", group=groupStoch)
stochDLen   = input.int(10, "D Length", group=groupStoch)
stochTf     = input.timeframe("", "Timeframe (empty=現時)", group=groupStoch)
showStoch   = input.bool(true, "Show Stoch", group=groupStoch)

// ==== Calculate stmc MACD ====
bar b = bar.new(open, high, low, close)
osc o = b.stmc(src, fast, slow, sigs, sigl)

// ==== Calculate Stochastic ====
[stochK, stochD] = calcStoch(stochLen, stochSmooth, stochDLen, stochTf)
stochObj = stoch.new(stochK, stochD)

// ==== Price Change/Volume (Fixed: Previous Trading Day) ====
prevDayClose = request.security(syminfo.tickerid, "1D", close[1], lookahead=barmerge.lookahead_off)
priceChange = ((close - prevDayClose) / prevDayClose) * 100
priceChangeCandle = ((close - open) / open) * 100
volume1D = request.security(syminfo.tickerid, "1D", volume, lookahead=barmerge.lookahead_off)

// ==== 強制 fetch 2分鐘 timeframe 特定時刻 signal ====
get2mSignalAt(hourTarget, minTarget) =>
    request.security(syminfo.tickerid, "2", hour == hourTarget and minute == minTarget ? o.s : na, lookahead=barmerge.lookahead_on)

// 2m timeframe 09:30、09:32、10:00 bar close 嘅 MACD signal
signal930 = get2mSignalAt(9, 30)
signal932 = get2mSignalAt(9, 32)
signal1000 = get2mSignalAt(10, 0)

// ==== 其他 Multi-timeframe signals（本 timeframe）====
var float stored930Signal = na
var float stored932Signal = na
var float stored1000Signal = na

if hour == 9 and minute == 30
    stored930Signal := o.s
if hour == 9 and minute == 32
    stored932Signal := o.s
if hour == 10 and minute == 0
    stored1000Signal := o.s

openSignal = stored932Signal - stored930Signal
openTrendSignal = stored1000Signal - stored932Signal

s30sSignal = request.security(syminfo.tickerid, "30S", o.s[1], lookahead=barmerge.lookahead_off)
s1mSignal = request.security(syminfo.tickerid, "1", o.s[1], lookahead=barmerge.lookahead_off)
s5mSignal = request.security(syminfo.tickerid, "5", o.s[1], lookahead=barmerge.lookahead_off)

currentSK = request.security(syminfo.tickerid, "2", stochObj.k, lookahead=barmerge.lookahead_off)
previousSK = request.security(syminfo.tickerid, "2", stochObj.k[1], lookahead=barmerge.lookahead_off)
sk2mDiff = currentSK - previousSK

// ==== Plots ====
plot(o.s, "stmc Signal Line", color=color.fuchsia, linewidth=2)
plot(o.h, "stmc Histogram", color=o.h >= 0 ? color.green : color.red, style=plot.style_columns, linewidth=2)
plot(o.b.c, "stmc HA MACD Value", color=color.blue, linewidth=1)
plot(showStoch ? stochObj.k : na, "Stoch %K", color=color.white, linewidth=1)
plot(showStoch ? stochObj.d : na, "Stoch %D", color=color.orange, linewidth=1)

// ==== Webhook Alert ====
if ta.change(time)
    humanTime = str.tostring(year) + '-' + str.tostring(month, "00") + '-' + str.tostring(dayofmonth, "00") + ' ' + str.tostring(hour, "00") + ':' + str.tostring(minute, "00") + ':' + str.tostring(second, "00") + ' ET'
    webhookMsg =
      '{' +
      '"symbol":"' + syminfo.ticker + '",' +
      '"timeframe":"' + timeframe.period + '",' +
      '"time":"' + str.tostring(time) + '",' +
      '"humanTime":"' + humanTime + '",' +
      '"price":' + str.tostring(close) + ',' +
      '"open":' + str.tostring(open) + ',' +
      '"high":' + str.tostring(high) + ',' +
      '"low":' + str.tostring(low) + ',' +
      '"close":' + str.tostring(close) + ',' +
      '"priceChange":' + str.tostring(priceChange, "#.##") + ',' +
      '"priceChangeCandle":' + str.tostring(priceChangeCandle, "#.##") + ',' +
      '"volume":' + str.tostring(volume1D) + ',' +
      '"macdSignal":' + str.tostring(o.s, "#.####") + ',' +
      '"stochK":' + str.tostring(stochObj.k, "#.##") + ',' +
      '"signal930":' + str.tostring(signal930, "#.####") + ',' +
      '"signal932":' + str.tostring(signal932, "#.####") + ',' +
      '"signal1000":' + str.tostring(signal1000, "#.####") + ',' +
      '"openSignal":' + str.tostring(openSignal, "#.####") + ',' +
      '"openTrendSignal":' + str.tostring(openTrendSignal, "#.####") + ',' +
      '"s30sSignal":' + str.tostring(s30sSignal, "#.####") + ',' +
      '"s1mSignal":' + str.tostring(s1mSignal, "#.####") + ',' +
      '"s5mSignal":' + str.tostring(s5mSignal, "#.####") + ',' +
      '"sk2mDiff":' + str.tostring(sk2mDiff, "#.####") +
      '}'
    alert(webhookMsg, alert.freq_once_per_bar_close)
